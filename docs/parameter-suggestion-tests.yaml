# パラメータサジェスト機能テスト仕様
# Project: STB Diff Viewer Parameter Suggestion Enhancement
# Created: 2025年1月

test_suites:
  # =====================================================
  # Step 1: 基盤整備テスト (SuggestionEngine)
  # =====================================================
  suggestion_engine:
    description: "サジェストエンジンの基本機能テスト"
    test_cases:
      - name: "XSD列挙値抽出テスト"
        id: "SE001"
        priority: "critical"
        steps:
          - action: "SuggestionEngine.getSuggestions('StbColumn', 'kind') を実行"
          - expected: "['ON_GIRDER', 'ON_BEAM', 'ON_COLUMN', 'ON_POST', 'ON_GRID', 'ON_CANTI', 'ON_SLAB'] を取得"
          - validation: "配列長が7個、全て文字列型"

      - name: "存在しない属性のテスト"
        id: "SE002"
        priority: "high"
        steps:
          - action: "SuggestionEngine.getSuggestions('StbColumn', 'invalid_attr') を実行"
          - expected: "空配列 [] を返す"
          - validation: "エラーを発生させず、gracefulに処理"

      - name: "サジェストソート機能テスト"
        id: "SE003"
        priority: "medium"
        steps:
          - action: "currentValue='ON_B' で getSuggestions() を実行"
          - expected: "'ON_BEAM' が最初に来るようにソート"
          - validation: "部分一致による優先度付けが動作"

      - name: "キャッシュ機能テスト"
        id: "SE004"
        priority: "medium"
        steps:
          - action: "同じ要素・属性で2回連続実行"
          - expected: "2回目は1回目より高速（50ms以内）"
          - validation: "performance.now()で実行時間計測"

  # =====================================================
  # Step 2: UI コンポーネントテスト (ParameterEditor)
  # =====================================================
  parameter_editor:
    description: "パラメータ編集UIの機能テスト"
    test_cases:
      - name: "ドロップダウンモード表示テスト"
        id: "PE001"
        priority: "critical"
        setup:
          - "kind属性（7個の列挙値）で編集モーダルを開く"
        steps:
          - action: "ParameterEditor.show() でモーダル表示"
          - expected: "selectタグのドロップダウンが表示される"
          - validation: "option要素が7個存在、フリーテキスト入力は非表示"

      - name: "混合モードテスト"  
        id: "PE002"
        priority: "high"
        setup:
          - "仮想的に15個の列挙値を持つ属性を作成"
        steps:
          - action: "ParameterEditor.show() でモーダル表示"
          - expected: "ドロップダウン + テキスト入力両方が表示"
          - validation: "selectとinputの両要素が存在"

      - name: "値選択・更新テスト"
        id: "PE003"
        priority: "critical"
        steps:
          - action: "ドロップダウンから 'ON_BEAM' を選択"
          - action: "OKボタンをクリック"
          - expected: "Promise resolve with 'ON_BEAM'"
          - validation: "返り値が選択した値と一致"

      - name: "キャンセル操作テスト"
        id: "PE004"
        priority: "high"
        steps:
          - action: "モーダルを開いてキャンセルボタンクリック"
          - expected: "Promise resolve with null"
          - validation: "変更がキャンセルされること"

      - name: "バリデーション表示テスト"
        id: "PE005"
        priority: "high"
        steps:
          - action: "フリーテキストに無効な値 'INVALID' を入力"
          - expected: "エラーメッセージが表示される"
          - validation: "error-messageクラスの要素が存在"

      - name: "リアルタイムバリデーションテスト"
        id: "PE006"
        priority: "medium"
        steps:
          - action: "フリーテキストにタイピング 'ON_BEA'"
          - expected: "バリデーション状態がリアルタイム更新"
          - validation: "input イベントでバリデーション実行"

  # =====================================================
  # Step 3: XSD機能拡張テスト 
  # =====================================================
  xsd_enhancement:
    description: "XSDスキーマパーサーの拡張機能テスト"
    test_cases:
      - name: "属性型情報取得テスト"
        id: "XSD001"
        priority: "critical"
        steps:
          - action: "getAttributeTypeInfo('StbColumn', 'kind') を実行"
          - expected: "{ type: 'enumeration', values: [...], required: true } を返す"
          - validation: "型情報オブジェクトの形式確認"

      - name: "列挙値存在チェックテスト"
        id: "XSD002" 
        priority: "high"
        steps:
          - action: "hasEnumerationValues('StbColumn', 'kind') を実行"
          - expected: "true を返す"
          - validation: "boolean値で正確に判定"

      - name: "非列挙属性チェックテスト"
        id: "XSD003"
        priority: "high"
        steps:
          - action: "hasEnumerationValues('StbNode', 'X') を実行"
          - expected: "false を返す"
          - validation: "数値型属性で false"

      - name: "制約情報取得テスト"
        id: "XSD004"
        priority: "medium"
        steps:
          - action: "getAttributeConstraints('StbColumn', 'kind') を実行"
          - expected: "{ required: true, enumValues: [...] } を返す"
          - validation: "制約情報の完全性確認"

  # =====================================================
  # Step 4: 統合テスト
  # =====================================================
  integration:
    description: "既存機能との統合テスト"
    test_cases:
      - name: "編集ボタン置き換えテスト"
        id: "INT001"
        priority: "critical"
        setup:
          - "要素情報パネルでColumn要素を表示"
          - "編集モードを有効化"
        steps:
          - action: "kind属性の編集ボタンをクリック"
          - expected: "新しいParameterEditorモーダルが開く"
          - validation: "従来のprompt()ではなくモーダルが表示"

      - name: "値更新・反映テスト"
        id: "INT002"
        priority: "critical"
        steps:
          - action: "ParameterEditorで値を変更してOK"
          - expected: "要素情報パネルの表示が即座に更新"
          - validation: "DOM要素の値が変更されること"

      - name: "修正履歴記録テスト"
        id: "INT003"
        priority: "high"
        steps:
          - action: "ParameterEditorで値を変更"
          - expected: "modifications配列に変更が記録される"
          - validation: "既存の修正履歴機能との連携"

      - name: "バリデーション連携テスト"
        id: "INT004"
        priority: "high"
        steps:
          - action: "無効な値を入力してOK"
          - expected: "既存のXSDバリデーション警告が表示"
          - validation: "validateAttributeValue()との連携"

      - name: "エクスポート機能連携テスト"
        id: "INT005"
        priority: "medium"
        steps:
          - action: "サジェスト機能で値変更後、エクスポート実行"
          - expected: "変更された値でSTBファイルが出力"
          - validation: "exportModifications()との連携"

  # =====================================================
  # Step 5: エンドツーエンドテスト
  # =====================================================
  end_to_end:
    description: "実際のユーザーシナリオテスト"
    test_cases:
      - name: "基本編集フローテスト"
        id: "E2E001"
        priority: "critical"
        scenario: "柱要素のkind属性を ON_GIRDER から ON_BEAM に変更"
        steps:
          - action: "STBファイルを読み込み"
          - action: "柱要素 C1 をクリック選択"
          - action: "編集モードを有効化"
          - action: "kind属性の編集ボタンをクリック"
          - action: "ドロップダウンから ON_BEAM を選択"
          - action: "OKボタンをクリック"
          - expected: "要素情報パネルに ON_BEAM が表示される"
          - validation: "全工程が5秒以内に完了"

      - name: "複数属性編集テスト"
        id: "E2E002"
        priority: "high"
        scenario: "同一要素の複数属性を連続編集"
        steps:
          - action: "kind属性を編集"
          - action: "strength_concrete属性を編集"
          - action: "type属性を編集"
          - expected: "全ての変更が修正履歴に記録される"
          - validation: "modifications.length === 3"

      - name: "エラーハンドリングテスト"
        id: "E2E003"
        priority: "high"
        scenario: "XSDスキーマ読み込み失敗時の動作"
        setup:
          - "XSDファイルを一時的に削除または破損"
        steps:
          - action: "要素編集を試行"
          - expected: "フォールバック機能でフリーテキスト編集が可能"
          - validation: "アプリケーションクラッシュしない"

      - name: "パフォーマンステスト"
        id: "E2E004"
        priority: "medium"
        scenario: "大量要素を含むモデルでの編集性能"
        setup:
          - "1000個以上の要素を含むSTBファイル"
        steps:
          - action: "任意の要素で編集開始"
          - expected: "モーダル表示まで200ms以内"
          - validation: "performance.mark()で時間計測"

  # =====================================================
  # Step 6: ユーザビリティテスト
  # =====================================================
  usability:
    description: "ユーザビリティ・アクセシビリティテスト"
    test_cases:
      - name: "キーボード操作テスト"
        id: "UX001"
        priority: "high"
        steps:
          - action: "編集ボタンにTabでフォーカス移動"
          - action: "Enterキーでモーダル開く"
          - action: "矢印キーでドロップダウン操作"
          - action: "Escキーでキャンセル"
          - expected: "全操作がキーボードのみで完了"
          - validation: "WAI-ARIA準拠"

      - name: "レスポンシブデザインテスト"
        id: "UX002"
        priority: "medium"
        steps:
          - action: "画面幅を768px未満に変更"
          - action: "編集モーダルを表示"
          - expected: "モーダルが画面サイズに適応"
          - validation: "横スクロールが発生しない"

      - name: "多言語対応テスト"
        id: "UX003"
        priority: "low"
        steps:
          - action: "ブラウザ言語を英語に変更"
          - expected: "UI要素が英語で表示される"
          - validation: "i18n対応の基盤確認"

# =====================================================
# テスト実行設定
# =====================================================
test_config:
  environment:
    browsers: ["Chrome 120+", "Firefox 115+", "Safari 16+"]
    screen_sizes: ["1920x1080", "1366x768", "768x1024"]
    devices: ["Desktop", "Tablet", "Mobile"]
  
  performance_targets:
    modal_display: "< 200ms"
    suggestion_fetch: "< 50ms"
    validation: "< 10ms"
    memory_usage: "< +5MB"
  
  coverage_targets:
    unit_tests: "> 90%"
    integration_tests: "> 85%"
    e2e_tests: "> 80%"

# =====================================================
# テスト実行順序
# =====================================================
execution_order:
  phase_1:
    - suggestion_engine
    - xsd_enhancement
  phase_2:
    - parameter_editor
  phase_3:
    - integration
  phase_4:
    - end_to_end
    - usability

# =====================================================
# 合格基準
# =====================================================
acceptance_criteria:
  critical_tests: "100% pass"
  high_priority_tests: "> 95% pass"
  medium_priority_tests: "> 90% pass"
  performance_tests: "全目標値をクリア"
  manual_verification: "実際のSTBファイルで動作確認完了"